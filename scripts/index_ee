#!/usr/bin/env python
"""Indexes GEE Products."""
from datetime import datetime
import json
import os

import click
import numpy as np

from indexing.earthengine import EarthEngine
from indexing.utils import ee_indexer, Metadata, index_with_progress
import datacube

DC = datacube.Datacube(app='EE_Indexing_Script')
EE = EarthEngine()
HOME = os.getenv("HOME")
REGIONS_CONFIG = os.getenv('REGIONS_CONFIG', f'{HOME}/.config/datacube-core/regions.json')
WORLD_LATITUDE = (-90, 90)
WORLD_LONGITUDE = (-180, 180)

@click.command()
@click.option("--asset", required=True, type=click.STRING,
              help="The GEE asset ID.")
@click.option("--product", required=True, type=click.STRING,
              help="The ODC product name to index.")
@click.option("--parser", required=True, type=click.STRING,
              help="The parser to use for the product being indexed.")
@click.option("--region", default=None, type=click.STRING,
              help="A region defined in the json file located in the REGIONS_CONFIG env.")
@click.option("--update_product", is_flag=True, flag_value=True,
              help="Updates the product in the index.")
@click.option("--rolling_update", is_flag=True, flag_value=True,
              help="Updates the product with latest available times.")
@click.option("--progress", is_flag=True, flag_value=True,
              help="Show progress bar.")
def index_ee(**kwargs):
    """This script indexes GEE products."""
    metadata = Metadata(asset=kwargs['asset'],
                        product=kwargs['product'],
                        parser=kwargs['parser'])

    try:
        if kwargs['region']:
            with open(REGIONS_CONFIG, 'r') as _f:
                regions = json.loads(_f.read())
            filters = dict(region=EE.to_geojson(**regions[kwargs['region']]))
        else:
            filters = dict(region=EE.to_geojson(latitude=WORLD_LATITUDE,
                                                longitude=WORLD_LONGITUDE))

        asset_info = EE.get(metadata.asset, _print=False)
        if kwargs['rolling_update']:
            if kwargs['progress']:
                year = np.sort(DC.load(product=metadata.product,
                                       measurements=[])).astype('datetime64[ms]').item().year
                if year == datetime.utcnow().year:
                    years = range(year, year+1)
                else:
                    years = range(year, datetime.utcnow().year)
            else:
                start_time = np.sort(DC.load(product=metadata.product,
                                             measurements=[]).time.values)[-1]\
                             .astype('datetime64[ms]').item().isoformat()
                end_time = datetime.utcnow().isoformat()
        else:
            if kwargs['progress']:
                date_range = [np.datetime64(date, 'ms').item().year\
                              for date in asset_info.json()['properties']['date_range']]
                years = range(date_range[0], date_range[1]+1)
            else:
                start_time, end_time = [np.datetime64(date, 'ms').item().isoformat()\
                                        for date in asset_info.json()['properties']['date_range']]

        if kwargs['progress']:
            click.echo('Total in database before indexing: {}'\
                       .format(len(DC.find_datasets(product=metadata.product))))
            _sum = index_with_progress(years, metadata, filters,
                                       update=kwargs['update_product'])[-1]
            click.echo(f'Sum of images found: {_sum}')
            click.echo('Total in database after indexing: {}'\
                       .format(len(DC.find_datasets(product=metadata.product))))

        else:
            click.echo('Total in database before indexing: {}'\
                       .format(len(DC.find_datasets(product=metadata.product))))
            filters.update(startTime=f'{start_time}Z',
                           endTime=f'{end_time}Z')
            _sum = ee_indexer(metadata, filters, update=kwargs['update_product'])[-1]

            click.echo(f'Sum of images found: {_sum}')
            click.echo('Total in database after indexing: {}'\
                       .format(len(DC.find_datasets(product=metadata.product))))
    except Exception:
        print(f'Failed to index {metadata.product}.')

if __name__ == '__main__':
    index_ee()
